name: Build cosmotop

on:
  workflow_dispatch:
    inputs:
      debug:
        required: false
        type: boolean
  push:
    branches: ["main"]
  pull_request:
  workflow_call:
    inputs:
      version:
        required: true
        type: string

env:
  zig_version: 0.13.0
  blink_version: 4da95da865a1d3ccdc2e802cccfbddd8507d1c95
  openssl_version: 3.5.0

jobs:
  build:
    name: Build cosmotop.com
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Load cosmocc version
        run: |
          version=$(cat .github/cosmocc_version.txt)
          echo "cosmocc_version=${version}" >> "$GITHUB_ENV"

      - name: Setup cosmocc
        uses: bjia56/setup-cosmocc@v0.0.3
        with:
          version: ${{ env.cosmocc_version }}

      - name: Build OpenSSL
        run: |
          OPENSSL_VERSION=${{ env.openssl_version }}
          wget https://github.com/openssl/openssl/releases/download/openssl-${OPENSSL_VERSION}/openssl-${OPENSSL_VERSION}.tar.gz
          tar -xzf openssl-${OPENSSL_VERSION}.tar.gz
          cd openssl-${OPENSSL_VERSION}

          sudo mkdir -p /zip/openssl
          sudo chown -R $USER /zip
          cd /zip/openssl
          wget https://curl.se/ca/cacert.pem
          mv cacert.pem cert.pem

          cd -
          mkdir ${{ github.workspace }}/openssl

          export AR=$(command -v cosmoar)
          export CC=cosmocc
          export CXX=cosmoc++
          ./Configure linux-generic64 no-asm no-shared no-dso no-engine no-tests --prefix=${{ github.workspace }}/openssl --openssldir=/zip/openssl
          make -j4
          make install_sw
          cp -r .aarch64 ${{ github.workspace }}/openssl/lib/.aarch64

      - name: Build cosmotop.com
        run: |
          export CC=cosmocc
          export CXX=cosmoc++
          cmake -B build -DTARGET=host -DLINK_OPENSSL=ON -DCMAKE_PREFIX_PATH=${{ github.workspace }}/openssl ${{ inputs.version && '-DRELEASE=1' || '' }}
          cmake --build build --parallel 4

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cosmotop.parts
          path: |
            ./build/cosmotop.com.dbg
            ./build/cosmotop.aarch64.elf

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openssl
          path: |
            /zip/openssl

  build_linux_plugin:
    name: Build plugin Linux ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up zig
        uses: mlugg/setup-zig@v1
        with:
          version: ${{ env.zig_version }}

      - name: Build plugin
        shell: bash
        run: |
          export CC="${{ github.workspace }}/zigshim/zig cc -target ${{ matrix.arch }}-linux-musl"
          export CXX="${{ github.workspace }}/zigshim/zig c++ -target ${{ matrix.arch }}-linux-musl"
          cmake -B build -DTARGET=plugin ${{ inputs.version && '-DRELEASE=1' || '' }} ${{ matrix.arch == 'x86_64' && '-DRSMI_STATIC=ON' || '' }}
          cmake --build build --parallel 4
          cp build/cosmotop-plugin.exe ./cosmotop-linux-${{ matrix.arch }}.exe

      - name: Upload plugin
        uses: actions/upload-artifact@v4
        with:
          name: plugin-linux-${{ matrix.arch }}
          path: ./cosmotop-linux-${{ matrix.arch }}.exe

  build_macos_plugin:
    name: Build plugin MacOS ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: macos-13
            arch: x86_64
          - runner: macos-14
            arch: aarch64

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build plugin
        shell: bash
        run: |
          cmake -B build -DTARGET=plugin ${{ inputs.version && '-DRELEASE=1' || '' }}
          cmake --build build --parallel 4
          cp build/cosmotop-plugin.exe ./cosmotop-macos-${{ matrix.arch }}.exe

      - name: Upload plugin
        uses: actions/upload-artifact@v4
        with:
          name: plugin-macos-${{ matrix.arch }}
          path: ./cosmotop-macos-${{ matrix.arch }}.exe

  build_windows_plugin:
    name: Build plugin Windows ${{ matrix.arch }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build plugin
        shell: bash
        run: |
          cmake -B build -DTARGET=plugin ${{ inputs.version && '-DRELEASE=1' || '' }}
          cmake --build build --parallel 4 --config Release
          cp build/Release/cosmotop-plugin.dll ./cosmotop-windows-${{ matrix.arch }}.dll

      - name: Upload plugin
        uses: actions/upload-artifact@v4
        with:
          name: plugin-windows-${{ matrix.arch }}
          path: ./cosmotop-windows-${{ matrix.arch }}.dll

  build_freebsd_plugin:
    name: Build plugin FreeBSD ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Start VM
        uses: vmactions/freebsd-vm@v1
        with:
          sync: nfs
          arch: ${{ matrix.arch }}
          release: "13.3"
          prepare: |
            pkg install -y cmake

      - name: Build plugin
        shell: freebsd {0}
        run: |
          cd ${{ github.workspace }}
          cmake -B build -DTARGET=plugin ${{ inputs.version && '-DRELEASE=1' || '' }}
          cmake --build build --parallel 4
          cp build/cosmotop-plugin.exe ./cosmotop-freebsd-${{ matrix.arch }}.exe

      - name: Upload plugin
        uses: actions/upload-artifact@v4
        with:
          name: plugin-freebsd-${{ matrix.arch }}
          path: ./cosmotop-freebsd-${{ matrix.arch }}.exe

  build_netbsd_plugin:
    name: Build plugin NetBSD ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Start VM
        uses: vmactions/netbsd-vm@v1
        with:
          sync: nfs
          arch: ${{ matrix.arch }}
          release: "10.0"
          prepare: |
            /usr/sbin/pkg_add cmake clang git gmake

      - name: Build plugin
        shell: netbsd {0}
        run: |
          cd ${{ github.workspace }}
          CC=clang CXX=clang++ cmake -B build -DTARGET=plugin ${{ inputs.version && '-DRELEASE=1' || '' }}
          cmake --build build --parallel 4
          cp build/cosmotop-plugin.exe ./cosmotop-netbsd-${{ matrix.arch }}.exe

      - name: Build blink
        if: ${{ matrix.arch != 'x86_64' }}
        shell: netbsd {0}
        run: |
          cd ${{ github.workspace }}
          git config --global --add safe.directory ${{ github.workspace}}/blink
          git clone https://github.com/bjia56/blink.git
          cd blink
          git checkout ${{ env.blink_version }}
          ./configure
          gmake -j4
          /usr/sbin/paxctl +m o/blink/blink
          cp o/blink/blink blink-netbsd-${{ matrix.arch }}

      - name: Interactive debugging
        uses: fawazahmed0/action-debug-vscode@v3
        if: ${{ always() && inputs.debug }}

      - name: Upload plugin
        uses: actions/upload-artifact@v4
        with:
          name: plugin-netbsd-${{ matrix.arch }}
          path: ./cosmotop-netbsd-${{ matrix.arch }}.exe

      - name: Upload blink
        if: ${{ matrix.arch != 'x86_64' }}
        uses: actions/upload-artifact@v4
        with:
          name: blink-netbsd-${{ matrix.arch }}
          path: ./blink/blink-netbsd-${{ matrix.arch }}

  build_openbsd_plugin:
    name: Build plugin OpenBSD ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Start VM
        uses: vmactions/openbsd-vm@v1
        with:
          sync: nfs
          arch: ${{ matrix.arch }}
          release: "7.6"
          prepare: |
            pkg_add cmake gmake git

      - name: Build plugin
        shell: openbsd {0}
        run: |
          cd ${{ github.workspace }}
          cmake -B build -DTARGET=plugin ${{ inputs.version && '-DRELEASE=1' || '' }}
          cmake --build build --parallel 4
          cp build/cosmotop-plugin.exe ./cosmotop-openbsd-${{ matrix.arch }}.exe

      - name: Build blink
        shell: openbsd {0}
        run: |
          cd ${{ github.workspace }}
          git config --global --add safe.directory ${{ github.workspace}}/blink
          git clone https://github.com/bjia56/blink.git
          cd blink
          git checkout ${{ env.blink_version }}
          ./configure
          gmake -j4
          cp o/blink/blink blink-openbsd-${{ matrix.arch }}

      - name: Upload plugin
        uses: actions/upload-artifact@v4
        with:
          name: plugin-openbsd-${{ matrix.arch }}
          path: ./cosmotop-openbsd-${{ matrix.arch }}.exe

      - name: Upload blink
        uses: actions/upload-artifact@v4
        with:
          name: blink-openbsd-${{ matrix.arch }}
          path: ./blink/blink-openbsd-${{ matrix.arch }}

  # TODO: Remove this once Cosmopolitan releases latest apelink
  build_apelink:
    name: Build apelink
    runs-on: ubuntu-latest

    steps:
      - name: Build apelink
        run: |
          git clone https://github.com/bjia56/cosmopolitan.git
          cd cosmopolitan
          git checkout dd4fc71bfae767bcb63d8e509333909e9a7860a7
          make o//tool/build/apelink

      - name: Upload apelink
        uses: actions/upload-artifact@v4
        with:
          name: apelink
          path: ./cosmopolitan/o/tool/build/apelink

  bundle:
    name: Bundle plugins into cosmotop.exe
    runs-on: ubuntu-latest
    needs:
      - build
      - build_linux_plugin
      - build_macos_plugin
      - build_windows_plugin
      - build_freebsd_plugin
      - build_netbsd_plugin
      - build_openbsd_plugin
      - build_apelink

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Load cosmocc version
        run: |
          version=$(cat .github/cosmocc_version.txt)
          echo "cosmocc_version=${version}" >> "$GITHUB_ENV"

      - name: Setup cosmocc
        uses: bjia56/setup-cosmocc@v0.0.3
        with:
          version: ${{ env.cosmocc_version }}

      - name: Set up zig
        uses: mlugg/setup-zig@v1
        with:
          version: ${{ env.zig_version }}

      - name: Download cosmotop parts
        uses: actions/download-artifact@v4
        with:
          name: cosmotop.parts
          path: .

      - name: Download OpenSSL
        uses: actions/download-artifact@v4
        with:
          name: openssl
          path: /tmp/openssl

      - name: Download plugins
        uses: actions/download-artifact@v4
        with:
          pattern: plugin-*
          path: /tmp/cosmotop-plugin/
          merge-multiple: true

      - name: Download blink
        uses: actions/download-artifact@v4
        with:
          pattern: blink-*
          path: /tmp/blink/
          merge-multiple: true

      - name: Download apelink
        uses: actions/download-artifact@v4
        with:
          name: apelink
          path: /tmp/

      - name: Inspect artifacts
        run: |
          tree /tmp || true

      - name: Apelink
        run: |
          chmod +x /tmp/apelink

          cosmo_bin=$(dirname $(which cosmocc))
          /tmp/apelink \
            -l ${cosmo_bin}/ape-x86_64.elf \
            -l ${cosmo_bin}/ape-aarch64.elf \
            -M ${cosmo_bin}/ape-m1.c \
            -k NetBSD \
            -l /tmp/blink/blink-netbsd-aarch64 \
            -k OpenBSD \
            -l /tmp/blink/blink-openbsd-x86_64 \
            -l /tmp/blink/blink-openbsd-aarch64 \
            -o ${{ github.workspace }}/cosmotop.com \
            cosmotop.com.dbg \
            cosmotop.aarch64.elf

      - name: Bundle
        run: |
          sudo mkdir -p /zip/
          sudo cp -r ${{ github.workspace }}/themes /zip/
          sudo cp ${{ github.workspace }}/third_party/catppuccin/themes/* /zip/themes/
          sudo cp /tmp/cosmotop-plugin/cosmotop-linux-x86_64.exe /zip/
          sudo cp /tmp/cosmotop-plugin/cosmotop-linux-aarch64.exe /zip/
          sudo cp /tmp/cosmotop-plugin/cosmotop-macos-x86_64.exe /zip/
          sudo cp /tmp/cosmotop-plugin/cosmotop-macos-aarch64.exe /zip/
          sudo cp /tmp/cosmotop-plugin/cosmotop-windows-x86_64.dll /zip/

          cd ${{ github.workspace }}
          mkdir LHM
          cd LHM
          wget https://github.com/bjia56/LHM-CppExport/releases/download/v0.1.0/LHM-CppExport.zip
          unzip LHM-CppExport.zip
          sudo mkdir -p /zip/windows/
          sudo cp *.dll /zip/windows/
          sudo cp *.exe /zip/windows/

          sudo cp -r /tmp/openssl/ /zip/openssl/

          cd ${{ github.workspace }}
          mkdir licenses
          cd licenses
          cp ${{ github.workspace }}/LICENSE cosmotop
          curl -L -o LibreHardwareMonitor https://raw.githubusercontent.com/bjia56/LHM-CppExport/refs/tags/v0.1.0/LICENSE-LibreHardwareMonitor.txt
          curl -L -o LHM-CppExport https://raw.githubusercontent.com/bjia56/LHM-CppExport/refs/tags/v0.1.0/LICENSE.txt
          curl -L -o HIDSharp https://raw.githubusercontent.com/IntergatedCircuits/HidSharp/refs/tags/2.1.0/License.txt
          cp ${{ github.workspace }}//third_party/catppuccin/LICENSE "Catppuccin themes"
          cp ${{ github.workspace }}/third_party/range-v3/LICENSE.txt range-v3
          cp ${{ github.workspace }}/third_party/fmt/LICENSE fmt
          cp ${{ github.workspace }}/third_party/libcosmo_plugin/LICENSE libcosmo_plugin
          cp ${{ github.workspace }}/third_party/libcosmo_plugin/third_party/reflect-cpp/LICENSE reflect-cpp
          curl -L -o yyjson https://raw.githubusercontent.com/ibireme/yyjson/refs/tags/0.10.0/LICENSE
          curl -L -o compile-time-regular-expressions https://raw.githubusercontent.com/hanickadot/compile-time-regular-expressions/068c6269caa0600021bbe93ca784bb819f3a8273/LICENSE
          cp ${{ github.workspace }}/third_party/cpp-httplib/LICENSE cpp-httplib
          curl -L -o OpenSSL https://raw.githubusercontent.com/openssl/openssl/refs/tags/openssl-${{ env.openssl_version }}/LICENSE.txt
          cp ${{ github.workspace }}/third_party/widecharwidth/LICENSE widecharwidth
          cp ${{ github.workspace }}/third_party/rocm_smi_lib/License.txt "ROCm SMI"
          cp ${{ github.workspace }}/third_party/rocm_smi_lib/third_party/shared_mutex/LICENSE shared_mutex
          curl -L -o igt-gpu-tools https://gitlab.freedesktop.org/drm/igt-gpu-tools/-/raw/0f02dc176959e6296866b1bafd3982e277a5e44b/COPYING
          cp $(dirname $(dirname $(which cosmocc)))/LICENSE "Cosmopolitan Libc"
          cp $(dirname $(which zig))/LICENSE "Zig Programming Language"
          cp $(dirname $(which zig))/lib/libc/musl/COPYRIGHT "musl libc"
          cp $(dirname $(which zig))/lib/libcxx/LICENSE.TXT "LLVM Project"
          curl -L -o Info-ZIP https://raw.githubusercontent.com/jart/cosmopolitan/refs/tags/${{ env.cosmocc_version }}/third_party/zip/LICENSE
          curl -L -o Blink https://raw.githubusercontent.com/jart/blink/98f95e8383d1032eb4d2dc6aae937b23539e915e/LICENSE
          sudo mkdir -p /zip/licenses/
          sudo cp * /zip/licenses/

          cd /zip
          wget https://cosmo.zip/pub/cosmos/bin/zip
          zip -r ${{ github.workspace }}/cosmotop.com *

          cd ${{ github.workspace }}
          mv cosmotop.com cosmotop.exe

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cosmotop.exe
          path: ./cosmotop.exe

  check:
    name: Check cosmotop.exe ${{ matrix.os }} ${{ matrix.arch }}
    needs: bundle
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: macos-13
            arch: x86_64
            os: MacOS
          - runner: macos-14
            arch: arm64
            os: MacOS
          - runner: ubuntu-latest
            arch: x86_64
            os: Linux
          - runner: ubuntu-latest
            arch: aarch64
            os: Linux
          - runner: windows-latest
            arch: x86_64
            os: Windows

    steps:
      - name: Set up cosmocc
        if: ${{ matrix.os == 'Linux' }}
        uses: bjia56/setup-cosmocc@v0.0.3

      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: cosmotop.exe
          path: .

      - name: Mark executable
        shell: bash
        run: |
          chmod +x cosmotop.exe

      - name: Configure Windows
        if: ${{ matrix.os == 'Windows' }}
        shell: powershell
        run: |
          Remove-MpPreference -ExclusionPath (Get-MpPreference).ExclusionPath
          Set-Service -Name wuauserv -StartupType Manual -Status Running

      - name: Scan with Windows Defender
        if: ${{ matrix.os == 'Windows' }}
        shell: cmd
        run: |
          copy cosmotop.exe C:
          "C:\Program Files\Windows Defender\MpCmdRun.exe" -SignatureUpdate
          "C:\Program Files\Windows Defender\MpCmdRun.exe" -Scan -ScanType 3 -File C:\cosmotop.exe

      - name: Check cosmotop.exe
        shell: bash
        run: |
          ./cosmotop.exe --version

  docker:
    name: Build cosmotop Docker image
    needs: bundle
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: cosmotop.exe
          path: .

      - name: Set image name and tags
        id: tags
        run: |
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/$(basename ${{ github.repository }})"
          TAGS=""

          if [[ "${{ github.ref }}" == "refs/heads/main" && -z "${{ inputs.version }}" ]]; then
            TAGS="$IMAGE_NAME:main"
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            TAGS="$IMAGE_NAME:latest,$IMAGE_NAME:${{ inputs.version }}"
          fi

          echo "image_name=$IMAGE_NAME" >> $GITHUB_ENV
          echo "tags=$TAGS" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ !!env.tags }}
          tags: ${{ env.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
